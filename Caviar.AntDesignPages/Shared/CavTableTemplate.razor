@typeparam TData

<Space Direction="@DirectionVHType.Vertical" Size="@("large")">
    @if (IsOpenQuery)
    {
        <SpaceItem>
            <Space>
                <SpaceItem>
                    <Select Mode="multiple"
                            Placeholder="选择查询的字段"
                            @bind-Values="@_selectedValues"
                            TItemValue="string"
                            TItem="string"
                            Style="width: 200px;"
                            EnableSearch
                            AllowClear>
                        <SelectOptions>
                            @if (ViewModelHeader != null)
                            {
                                @foreach (var item in ViewModelHeader)
                                {
                                    if (string.IsNullOrEmpty(item.DispLayName)) continue;
                                    <SelectOption TItemValue="string" TItem="string" Value=@item.TypeName Label=@item.DispLayName />
                                }
                            }
                        </SelectOptions>
                    </Select>
                </SpaceItem>
                <SpaceItem>
                    <Input Placeholder="请输入搜索内容" @bind-Value="@Query.QueryStr" />
                </SpaceItem>
                <SpaceItem>
                    <RangePicker TValue="DateTime?[]" ShowTime='@("HH:mm")' OnChange="OnRangeChange" />
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" OnClick="FuzzyQuery">查询</Button>
                </SpaceItem>
            </Space>
        </SpaceItem>
    }
    <SpaceItem>

        <Space>
            @if (Buttons != null)
            {
                foreach (var item in Buttons)
                {
                    if (item.ButtonPosition == ButtonPosition.Header)
                    {
                        <SpaceItem>
                            @CreatePackButton(item,default)
                        </SpaceItem>
                    }
                }
            }
        </Space>

    </SpaceItem>
</Space>


<Table DataSource="DataSource"
       Total="Total"
       PageIndex="PageIndex"
       PageSize="PageSize"
       ScrollX="1300"
       TItem="TData"
       OnPageIndexChange="PageIndexChanged"
       TreeChildren="TreeChildren">
    @if (ViewModelHeader != null)
    {
        foreach (var item in ViewModelHeader)
        {
            var typeNmae = item.ModelType.ToLower();
            switch (typeNmae)
            {
                case "string":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="string" Width="@item.Width" />
                    break;
                case "int32":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="int" />
                    break;
                case "boolean":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="bool">
                        @{
                            var obj = context.GetObjValue(item.TypeName);
                            if (obj != null)
                            {
                                var value = (bool)obj;
                                if (value)
                                {
                                    <Tag Color="green">是</Tag>
                                }
                                else
                                {
                                    <Tag Color="pink">否</Tag>
                                }
                            }
                        }
                    </Column>
                    break;
                case "guid":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="Guid" />
                    break;
                case "datetime":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="DateTime" />
                    break;
                case "double":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="double">
                    </Column>
                    break;
                case "float":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="float" />
                    break;
                case "short":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="short" />
                    break;
                case "byte":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="byte" />
                    break;
                case "icon":
                    <Column Title="@item.DispLayName" DataIndex="@item.TypeName" TData="string">
                        @{
                            var obj = context.GetObjValue(item.TypeName);
                            if (obj != null)
                            {
                                <Icon Type="@obj.ToString()" Theme="outline" />
                            }
                        }
                    </Column>
                    break;
                default:
                    break;
            }

        }


        <ActionColumn Title="操作">
            <Space>
                @if (Buttons != null)
                {
                    foreach (var item in Buttons)
                    {
                        if (item.ButtonPosition == ButtonPosition.Row)
                        {
                            <SpaceItem>
                                @CreatePackButton(item,context)
                            </SpaceItem>
                        }
                    }
                }
            </Space>
        </ActionColumn>
    }
</Table>



@code{
    RenderFragment CreatePackButton(ViewMenu menu,TData context)
    {
        RenderFragment render = null;
        if (menu.IsDoubleTrue)
        {
            string title = $"确认{menu.MenuName}该数据吗";
            render =@<Popconfirm Title='@title'
                        OkText='确认'
                        CancelText="取消"
                        OnConfirm="()=>ButtonClick(menu,context)">
                         @CreateButton(menu, context);
                </Popconfirm>;
        }
        else
        {
            render = CreateButton(menu, context);
        }
        return render;
    }

    RenderFragment CreateButton(ViewMenu menu, TData context)
    {

        RenderFragment render = null;
        string type = menu.ButtonPosition == ButtonPosition.Header ? "primary" : "link";
        render =@<Button Icon="@menu.Icon" Type="@type" Style="margin-bottom:16px" OnClick="() => doubleTrueClick(menu, context)">
                @if (menu.TargetType == TargetType.NewLabel)
                {
                    <a href="@menu.Url" target="_blank">@menu.MenuName</a>
                }
                else
                {
                    @menu.MenuName
                }
            </Button>;
        return render;
    }

    void doubleTrueClick(ViewMenu menu, TData context)
    {
        if (menu.IsDoubleTrue) return;
        ButtonClick(menu, context);
    }

}