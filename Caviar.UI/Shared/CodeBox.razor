@using AntDesign.JsInterop
@inherits ComponentBase

<div class="code-box">
    <section class="code-box-demo">
            @Component
    </section>
    <section class="code-box-meta markdown">
        <div class="code-box-actions">
            <Tooltip Title="@(_copied?"复制成功" : "复制")" OnVisibleChange="() => _copied = false">
                <Unbound>
                    <Icon RefBack="context" Type="@(_copied?"check" : "snippets")" Class="code-box-code-copy code-box-code-action" OnClick="Copy" />
                </Unbound>
            </Tooltip>
            <Tooltip Title="@(CodeExpand?"隐藏代码":"显示代码")">
                <Unbound>
                    <span @ref="context.Current" class="code-expand-icon code-box-code-action" @onclick="_ => CodeExpand = !CodeExpand">
                        <img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/wSAkBuJFbdxsosKKpqyq.svg" class="@(CodeExpand ? "code-expand-icon-hide" : "code-expand-icon-show")">
                        <img alt="expand code" src="https://gw.alipayobjects.com/zos/rmsportal/OpROPHYqWmrMDBFMZtKF.svg" class="@(!CodeExpand ? "code-expand-icon-hide" : "code-expand-icon-show")">
                    </span>
                </Unbound>
            </Tooltip>
            @DebugIcon
        </div>
    </section>
    <section class="highlight-wrapper @(CodeExpand?"highlight-wrapper-expand":"")">
        <div class="highlight">
            <HighlightedCode Code="@Demo" CanLoad="CodeExpand" Language="html"></HighlightedCode>
        </div>
    </section>
</div>

@inject InteropService InteropService

@code {[Parameter]
            public string ComponentName { get; set; }

            [Parameter]
            public string Demo { get; set; }

            [Parameter]
            public bool CodeExpand { get; set; }

            RenderFragment Component;

            RenderFragment DebugIcon;

            private bool _copied;

            protected override async Task OnInitializedAsync()
            {
                await base.OnInitializedAsync();
    }

    async Task Copy()
    {
        await InteropService.Copy(Demo);
        _copied = true;
    }


}
