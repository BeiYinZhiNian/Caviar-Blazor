@typeparam TData

<Space Direction="@DirectionVHType.Vertical" Size="@("small")">
    @if(IsOpenQuery)
    {
        <SpaceItem>
            <Space>
                <SpaceItem>
                    <CavSearch Fields="ViewFields" QueryCallback="QueryCallback"></CavSearch>
                </SpaceItem>
                <SpaceItem>
                    <Button>高级搜索</Button>
                </SpaceItem>
            </Space>
        </SpaceItem>
    }
    <SpaceItem>
        <Space>
            @if (Buttons != null)
            {
                foreach (var item in Buttons)
                {
                    if (item.Entity.ButtonPosition == ButtonPosition.Default && item.Entity.MenuType == MenuType.Button)
                    {
                        <SpaceItem>
                            @CreatePackButton(item, default)
                        </SpaceItem>
                    }
                }
            }
        </Space>

    </SpaceItem>
</Space>

    <Table DataSource="DataSource"
       @ref="Table"
       ScrollX="@ScrollX"
       Bordered="Bordered"
       HidePagination
       PageSize="PageSize"
       TItem="TData"
       Loading="Loading"
       @bind-SelectedRows="SelectedRows"
       TreeChildren="TreeChildren">
       

       
    @{
        if (IsSelectedRows)
        {
            <Selection  Width="50"/>
        }
        foreach (var item in ViewFields)
        {
            if (!item.Entity.IsPanel || !item.IsPermission) continue;
            item.Value = context;
            var tableItem = GetTableItems?.Invoke(item);
            var fieldName = "entity." + item.Entity.FieldName;
            var isEnum = item.IsEnum;
            if (tableItem != null)
            {
                @tableItem
                continue;
            }
            if (isEnum)
            {
                <Column Title="@item.DisplayName" TData="string" Width="@item.Entity.TableWidth">
                    @{
                        var obj = context.GetObjValue("Entity").GetObjValue(item.Entity.FieldName);
                        if (obj != null)
                        {
                            var value = (int)obj;
                            @item.EnumValueName[value]
                        }
                    }
                </Column>
                continue;
            }
            var entityType = item.EntityType.ToLower();

            switch (entityType)
            {
                case "string":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="string" Width="@item.Entity.TableWidth">
                            @{
                                var obj = context.GetObjValue("Entity").GetObjValue(item.Entity.FieldName);
                                if (obj != null)
                                {
                                    var value = (string)obj;
                                    if (value.Count() >= EllipsisLen)
                                    {
                                        var txt = value.Substring(0, DisplayCount) + "...";
                                        <Tooltip Title="@value">
                                            <span>@txt</span>
                                        </Tooltip>
                                    }
                                    else{
                                        <span>@value</span>
                                    }
                                }
                            }
                    </Column>
                    break;
                case "int32":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="int?" />
                    break;
                case "boolean":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="bool?">
                        @{
                            var obj = context.GetObjValue("Entity").GetObjValue(item.Entity.FieldName);
                            if (obj != null)
                            {
                                var value = (bool)obj;
                                if (value)
                                {
                                    <Tag Color="green">@UserConfig.LanguageService[$"{CurrencyConstant.Page}.{CurrencyConstant.Yes}"]</Tag>
                                }
                                else
                                {
                                    <Tag Color="pink">@UserConfig.LanguageService[$"{CurrencyConstant.Page}.{CurrencyConstant.No}"]</Tag>
                                }
                            }
                        }
                    </Column>
                    break;
                case "guid":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="Guid?" />
                    break;
                case "datetime":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="DateTime?" />
                    break;
                case "datetimeoffset":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="DateTimeOffset?" />
                    break;
                case "double":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="double?">
                    </Column>
                    break;
                case "float":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="float?" />
                    break;
                case "short":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="short?" />
                    break;
                case "byte":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="byte?" />
                    break;
                case "icon"://特殊字段编码
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="string">
                        @{
                            var obj = context.GetObjValue("Entity").GetObjValue(item.Entity.FieldName);
                            if (obj != null)
                            {
                                <Icon Type="@obj.ToString()" Theme="outline" />
                            }
                        }
                    </Column>
                    break;
                case "headportrait":
                    <Column Title="@item.DisplayName" DataIndex="@fieldName" TData="string">
                        @{
                            var obj = context.GetObjValue("Entity").GetObjValue(item.Entity.FieldName);
                            if (obj != null)
                            {
                                <Avatar Src="@obj.ToString()" />
                            }
                            else
                            {
                                <Avatar Style="background-color: #87d068" Icon="user" />
                            }
                        }
                    </Column>
                    break;
                default:
                    Console.WriteLine($"未找到对应类型:{item.EntityType}");
                    break;
            }

        }

        if (Buttons != null && Buttons.Count > 0)
        {
            List<SysMenuView> but = Buttons.Where(u => u.Entity.ButtonPosition == ButtonPosition.Row && u.Entity.MenuType == MenuType.Button).ToList();
            if (but.Count > 0)
            {
                <ActionColumn Title=@UserConfig.LanguageService[$"{CurrencyConstant.Page}.{CurrencyConstant.Operation}"] Width="@(but.Count==2?ActionColumnMaxWidth:ActionColumnMinWidth)" Fixed="@Fixed">
                    @if (but.Count >= 3)
                    {
                        <Dropdown>
                            <Overlay>
                                <Menu>
                                    @foreach (var item in but)
                                    {
                                        <MenuItem>
                                            @CreatePackButton(item, context)
                                        </MenuItem>
                                    }

                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <a class="ant-dropdown-link" @onclick:preventDefault>
                                    @UserConfig.LanguageService[$"{CurrencyConstant.Page}.{CurrencyConstant.More}"] <Icon Type="down" />
                                </a>
                            </ChildContent>
                        </Dropdown>

                    }
                    else
                    {
                        <Space Size=@("small")>
                            @foreach (var item in but)
                            {
                                <SpaceItem>
                                    @CreatePackButton(item, context)
                                </SpaceItem>
                            }
                        </Space>
                    }
                </ActionColumn>
            }
        }
    }

</Table>


<div style="float:right;margin-top:20px">
    <Pagination Total="Total"
                ShowTotal=showTotal
                PageSize="PageSize"
                Current="PageIndex"
                OnChange="PageIndexChanged"
                OnShowSizeChange="PageIndexChanged" />
</div>


@code {
    RenderFragment CreatePackButton(SysMenuView menu, TData context)
    {
        var button = CreateButtons?.Invoke(menu,context);
        if (button != null) return button;
        RenderFragment render = null;
        if (menu.Entity.IsDoubleTrue)
        {
            string title = UserConfig.LanguageService[$"{CurrencyConstant.Page}.{CurrencyConstant.DeleteTitle}"].Replace("{menu.DisplayName}",UserConfig.LanguageService[$"{CurrencyConstant.Menu}.{menu.DisplayName}"]);
            render =
    @<Popconfirm Title='@title'
                                 OkText=@UserConfig.LanguageService[$"{CurrencyConstant.Page}.{CurrencyConstant.Confirm}"]
                                 CancelText=@UserConfig.LanguageService[$"{CurrencyConstant.Page}.{CurrencyConstant.Cancel}"]
                                 OnConfirm="()=>ButtonClick(menu,context)">
        @CreateButton(menu, context)
    </Popconfirm>;
        }
        else
        {
            render = CreateButton(menu, context);
        }
        return render;
    }

    RenderFragment CreateButton(SysMenuView menu, TData context)
    {

        RenderFragment render = null;
        string type = menu.Entity.ButtonPosition == ButtonPosition.Default ? "primary" : "link";
        bool danger = menu.Entity.IsDoubleTrue == true ? true : false;
        
        @if (menu.Entity.TargetType == TargetType.NewLabel)
        {
            render =
            @<a href="@menu.Entity.Url" target="_blank"><Button Icon="@menu.Entity.Icon" Type="@type" Danger="danger" OnClick="() => doubleTrueClick(menu, context)">
        @menu.DisplayName
        </Button></a>
            ;
        }
        else{
            render =@<Button Icon="@menu.Entity.Icon" Type="@type" Danger="danger" OnClick="() => doubleTrueClick(menu, context)">
        @menu.DisplayName
        </Button>;
        }

        return render;
    }

    void doubleTrueClick(SysMenuView menu, TData context)
    {
        if (menu.Entity.IsDoubleTrue) return;
        ButtonClick(menu, context);
    }
    
}