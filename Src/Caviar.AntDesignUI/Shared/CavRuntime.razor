@using Microsoft.Extensions.Options
@if(_HybridType == HybridType.ServerSide ||_HybridType == HybridType.WebAssembly)
{
    <Text>当前模式不支持切换</Text>
}
else
{
    <Menu SelectedKeys="new string[] {HybridTypeStr}">
        <MenuItem Key="browser-wasm" OnClick="SwitchWasm">
            browser-wasm
        </MenuItem>
        <MenuItem Key="ServerSide" OnClick="SwitchServer">
            ServerSide
        </MenuItem>
    </Menu>
}



@code{
    @inject IOptions<HybridOptions> HybridOptions
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] NavigationManager NavManager { get; set; }
    HybridType _HybridType;
    private string HybridTypeStr { get; set; }
    private string Runtime => System.Runtime.InteropServices.RuntimeInformation.RuntimeIdentifier;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _HybridType = HybridOptions?.Value?.HybridType ?? HybridType.HybridOnNavigation; 
        HybridTypeStr = await JSRuntime.InvokeAsync<string>("getHybridType");
        StateHasChanged();

        if (HybridTypeStr?.StartsWith("Hybrid") != true) return;

        if (Runtime == "browser-wasm")
        {
            await JSRuntime.InvokeVoidAsync("wasmReady");
        }

        EventHandler<LocationChangedEventArgs> switchFunc = null;
        switchFunc = async (_, e) =>
        {
            try
            {
                var canUnsubscribe = await JSRuntime.InvokeAsync<bool>("switchToWasm", e.Location);
                if (canUnsubscribe)
                {
                    NavManager.LocationChanged -= switchFunc;
                }
            }
            catch (TaskCanceledException)
            {
            // Ignore this exception
        }
        };
        NavManager.LocationChanged += switchFunc;
    }

    private async void SwitchWasm()
    {
        await JSRuntime.InvokeVoidAsync("switchToWasm", string.Empty, true);
    }

    private void SwitchServer()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }
}
