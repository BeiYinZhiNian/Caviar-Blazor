@using System.Web
<CascadingAuthenticationState>
    <Router @ref="UserConfig.Router" AppAssembly="@typeof(Caviar.AntDesignUI.Config).Assembly"
            AdditionalAssemblies="Config.AdditionalAssemblies"
            PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeView>
                <Authorized>
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(CavMainLayout)" />
                    @*<ReuseTabsRouteView RouteData="@routeData" DefaultLayout="@typeof(CavMainLayout)" />*@
                </Authorized>
                <NotAuthorized>
                    <Caviar.AntDesignUI.Pages.User.Login></Caviar.AntDesignUI.Pages.User.Login>
                </NotAuthorized>
            </AuthorizeView>
        </Found>
        <NotFound>
            <Caviar.AntDesignUI.Pages.Exception._404._404></Caviar.AntDesignUI.Pages.Exception._404._404>
        </NotFound>
    </Router>
    <AntContainer />
</CascadingAuthenticationState>
@code {
    [Inject]
    UserConfig UserConfig { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Inject]
    IJSRuntime JSRuntime{ get; set; }

    protected override void OnParametersSet()
    {
        if (!Config.IsServer)
        {
            //在wasm中注册事件
            //wasm模式初始化完成，接收事件
            IframeMessage.SwitchWasm += SwitchWasm_RefChanged;
            IframeMessage.ForceLoad += ForceLoad_RefChanged;
        }  
        else
        {
            var uri = new Uri(NavigationManager.Uri);
            var collection = HttpUtility.ParseQueryString(uri.Query);
            //是否自动切换为wasm
            if (!string.IsNullOrEmpty(collection["IsAutomaticSwitchWasm"]))
            {
                UserConfig.IsAutomaticSwitchWasm = bool.Parse(collection["IsAutomaticSwitchWasm"]);
            }
        }
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var language = await JSRuntime.InvokeAsync<string>("getCookie", CurrencyConstant.LanguageHeader);
                UserConfig.LanguageService.SetLanguage(language);
            }
            catch
            {
                //任务被取消
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ForceLoad_RefChanged(IframeMessage message)
    {
        NavigationManager.NavigateTo(message.Url,true);
    }

    private void SwitchWasm_RefChanged(IframeMessage message)
    {
        NavigationManager.NavigateTo(message.Url);
        JSRuntime.InvokeVoidAsync("switch_wasm");
    }

}