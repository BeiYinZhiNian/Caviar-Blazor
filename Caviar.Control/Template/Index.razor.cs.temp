using AntDesign;
using Caviar.Models.SystemData;
using Caviar.AntDesignPages.Helper;
using Caviar.AntDesignPages.Shared;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using {ModelsNamespace};
/// <summary>
/// 生成者：{Producer}
/// 生成时间：{GenerationTime}
/// 代码由代码生成器自动生成，更改的代码可能被进行替换
/// 可在上层目录使用partial关键字进行扩展
/// </summary>
namespace {WebUINamespace}
{
    public partial class Index
    {
        #region 属性注入
        /// <summary>
        /// HttpClient
        /// </summary>
        [Inject]
        HttpHelper Http { get; set; }
        /// <summary>
        /// 全局提示
        /// </summary>
        [Inject]
        MessageService Message { get; set; }
        /// <summary>
        /// 用户配置
        /// </summary>
        [Inject]
        UserConfigHelper UserConfig { get; set; }
        /// <summary>
        /// 导航管理器
        /// </summary>
        [Inject]
        NavigationManager NavigationManager { get; set; }
        /// <summary>
        /// 确认框
        /// </summary>
        [Inject]
        ConfirmService Confirm { get; set; }
        #endregion

        #region 属性
        /// <summary>
        /// 数据源
        /// </summary>
        List<{OutName}> DataSource { get; set; }
        /// <summary>
        /// 表头
        /// </summary>
        List<ViewModelHeader> ViewModelHeaders { get; set; }
        /// <summary>
        /// 按钮
        /// </summary>
        List<ViewPowerMenu> Buttons { get; set; }
        #endregion

        #region 方法
        /// <summary>
        /// 获取数据源
        /// </summary>
        /// <returns></returns>
        async Task<List<{OutName}>> Get{OutName}()
        {
            var result = await Http.GetJson<List<{OutName}>>("{DataSourceWebApi}");
            if (result.Status != 200) return new List<{OutName}>();
            return result.Data;
        }
        /// <summary>
        /// 获取按钮
        /// </summary>
        /// <returns></returns>
        async Task<List<ViewPowerMenu>> GetPowerButtons()
        {
            string url = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
            var result = await Http.GetJson<List<ViewPowerMenu>>("Menu/GetButtons?url=" + url);
            if (result.Status != 200) return new List<ViewPowerMenu>();
            return result.Data;
        }
        /// <summary>
        /// 获取表头
        /// </summary>
        /// <returns></returns>
        async Task<List<ViewModelHeader>> GetHeader()
        {
            var modelNameList = await Http.GetJson<List<ViewModelHeader>>("Base/GetModelHeader?name=SyspowerMenu");
            if (modelNameList.Status == 200)
            {
                var item = modelNameList.Data.SingleOrDefault(u => u.TypeName.ToLower() == "icon");
                if (item != null) item.ModelType = "icon";
                return modelNameList.Data;
            }
            return new List<ViewModelHeader>();
        }
        #endregion

        #region 回调
        void RowCallback(RowCallbackData<{OutName}> row)
        {
            switch (row.Menu.MenuName)
            {
                default:
                    break;
            }
        }

        async void HandleOk(ViewPowerMenu e)
        {
            switch (e.MenuName)
            {
                default:
                    break;
            }

        }
        #endregion

        #region 重写
        protected override async Task OnInitializedAsync()
        {
            DataSource = await Get{OutName}();//获取数据源
            ViewModelHeaders = await GetHeader();//获取表头
            Buttons = await GetPowerButtons();//获取按钮
        }
        #endregion

    }
}
